generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  userId    String    @unique
  firstName String    @db.VarChar(255)
  lastName  String    @db.VarChar(255)
  delFlag   Boolean   @default(false)

  Document         Document[]
  ReadStatuses    DocumentStatus[]
  QuizResults     QuizResult[]
}

model Document {
  id                String     @id @default(uuid())
  fileName          String     @db.VarChar(255)
  pathName          String     @unique
  fileType          String     @db.VarChar(255)
  filesize          Int
  description       String?    @db.Text
  isPublic          Boolean    @default(false)
  delFlag           Boolean    @default(false)
  createdAt         String
  createdDate       DateTime   @default(now())
  lastModifiedAt    String?
  lastModifiedDate  DateTime?  @default(now())
  
  user        User              @relation(fields: [createdAt], references: [userId])
  ReadStatuses UserDocumentStatus[]
}

// 新增阅读状态表
model DocumentStatus {
  userId     String
  documentId String
  isRead     Boolean  @default(false)
  user       User     @relation(fields: [userId], references: [userId])
  document   Document @relation(fields: [documentId], references: [id])
  
  @@id([userId, documentId])
}

model Question {
  id           String          @id @default(uuid())
  questionType QuestionType
  content      String          @db.Text
  order        Int
  document   Document   @relation(fields: [documentId], references: [id])
  documentId String     @unique
  
  answerOptions QuesOption[]
  userAnswers  UserQuizAnswer[]
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

model QuesOption {
  id          String    @id @default(uuid())
  question    Question  @relation(fields: [questionId], references: [id])
  questionId  String
  content     String    @db.Text
  isCorrect   Boolean   @default(false)
  order       Int
}

model QuizResult {
  id              String     @id @default(uuid())
  user            User       @relation(fields: [userId], references: [userId])
  userId          String
  question            Question       @relation(fields: [questionId], references: [id])
  questionId          String
  score           Float       // 正确率（正确题数/总题数）
  totalQuestions  Int
  correctAnswers  Int
  completedAt     DateTime    @default(now())
  
  answers UserQuizAnswer[]
}

model QuizAnswer {
  id             String         @id @default(uuid())
  result         QuizResult @relation(fields: [resultId], references: [id])
  resultId       String
  question       Question       @relation(fields: [questionId], references: [id])
  questionId     String
  selectedOptions SelectedOption[]
}

// 多选答案中间表
model SelectedOption {
  answerId       String         @id @default(uuid())
  userAnswerId   String
  optionId       String
  userAnswer     QuizAnswer @relation(fields: [userAnswerId], references: [id])
  quesOption     QuesOption   @relation(fields: [optionId], references: [id])
}